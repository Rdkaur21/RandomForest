def RandomForestClassifier(df,y):
    cv = []
    import pandas as pd
    import numpy as np
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.model_selection import KFold
    from sklearn.model_selection import cross_val_score
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import accuracy_score
    
    #Train and test split:
    X_train, X_test, y_train, y_test = train_test_split(df,y,test_size=0.5, random_state=123456)
    #randomForestClassifier
    rfc = RandomForestClassifier(n_estimators=100, oob_score=True, random_state=123456)
    rfc.fit(X_train, y_train)
    
    #Accuracy score
    predicted = rfc.predict(X_test)
    accuracy = accuracy_score(y_test, predicted)
    print(accuracy)
    
    #Cross_val
    scores = cross_val_score(rfc,df,y,cv=10)
    cv.append(np.array(scores).mean())
    return cv
    
    ################## RandomForest Regressor #######################
  def RandomForestRegressor(data,y):
    import pandas as pd
    import numpy as np
    from sklearn.ensemble import RandomForestRegressor
    from sklearn.preprocessing import StandardScaler
    from sklearn.metrics import r2_score
    
    #Test-Train split 
    X_train, X_test, y_train, y_test = train_test_split(data, y, train_size=0.8, random_state=42)
    
    #Standardization:
    scaler = StandardScaler().fit(X_train)
    X_train_scaled = pd.DataFrame(scaler.transform(X_train), index=X_train.index.values, columns=X_train.columns.values)
    X_test_scaled = pd.DataFrame(scaler.transform(X_test), index=X_test.index.values, columns=X_test.columns.values)
    
    #RandomForest Regression:
    rf = RandomForestRegressor(n_estimators=50, oob_score=True, random_state=0)
    rf.fit(X_train, y_train)
    
    #Accuracy
    predicted_train = rf.predict(X_train)
    predicted_test = rf.predict(X_test)
    test_score = r2_score(y_test, predicted_test)
    test_score
    
    #GRIDSEARCH for RANDOM FOREST:
    from sklearn.model_selection import GridSearchCV
    param_grid = { 
           "n_estimators" : [100,50,70,150,250],
           "max_depth" : [80, 90, 100, 110],
           "min_samples_split" : [6, 8, 10,20]}
 
    CV_rf = GridSearchCV(estimator=rf, param_grid=param_grid, cv= 5)
    CV_rf.fit(X_train, y_train)
    print(CV_rf.best_params_)
    
